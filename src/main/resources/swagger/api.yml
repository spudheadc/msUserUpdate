# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: 'msUserCreation'
  version: 0.0.1
servers:
  - url: http://localhost:8571/api
    description: Development server
  - url: https://localhost:8571/api
    description: Development server with TLS Profile
paths:
  /user:
    post:
      tags:
        - user
      summary: Add a new user to the store
      operationId: addUser
      requestBody:
        description: User object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Succesfull Operation, the user was created
          headers:
            Location:
              schema:
                type: string
          content: {}
        303:
          description: Unsuccesfull Operation, the userName already exists
          headers:
            Location:
              schema:
                type: string
          content: {}
        500:
          description: Invalid input
          content: {}
      security:
        - jwt:
            - write:users
      x-codegen-request-body-name: body
  /user/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single User
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - jwt:
            - read:users
    patch:
      tags:
        - user
      summary: Updates a user in the store with form data
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User object that needs to be updated to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModify'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserModify'
        required: true
      responses:
        204:
          description: Succesfull Operation, the user was amended
          headers:
            Location:
              schema:
                type: string
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
        - jwt:
            - write:users
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Deletes a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Succesfull Operation, the user was deleted
          headers:
            Location:
              schema:
                type: string
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - jwt:
            - write:users
            - read:users
components:
  responses:
    Problem:
      description: error occurred - see status code and problem object for more information.
      content:
        'application/problem+json':
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
  schemas:
    User:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserName'
        - $ref: '#/components/schemas/UserPhone'
        - $ref: '#/components/schemas/UserEmail'
      properties:
        id:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        username:
          maxLength: 20
          minLength: 6
          type: string
      required:
        - orgId
        - username
      xml:
        name: User

    UserModify:
      type: object
      discriminator:
        propertyName: updateType
        mapping:
          UserName: '#/components/schemas/UserNameModify'
          UserPhone: '#/components/schemas/UserPhoneModify'
          UserEmail: '#/components/schemas/UserEmailModify'
      properties:
        updateType:
          type: string
          enum:
            - UserName
            - UserPhone
            - UserEmail
      required:
        - updateType

    UserNameModify:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserModify'
        - $ref: '#/components/schemas/UserName'

    UserName:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
      required:
        - firstName
        - lastName

    UserPhoneModify:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserModify'
        - $ref: '#/components/schemas/UserPhone'

    UserPhone:
      type: object
      properties:
        phone:
          type: string
      required:
        - phone

    UserEmailModify:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserModify'
        - $ref: '#/components/schemas/UserEmail'

    UserEmail:
      type: object
      properties:
        email:
          type: string
      required:
        - email

  securitySchemes:
    jwt:
      type: http
      description: JWT Authentication
      scheme: bearer
      bearerFormat: JWT
security:
  - jwt: []
